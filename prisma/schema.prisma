// uncomment the method of connecting postgres whichever is going to be used

generator client {
  provider = "prisma-client-js"
}

// When connecting to local postgres use this 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// When connecting to neon postgres use this
/*datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}*/

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  polls        Poll[]
  votes        Vote[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Poll {
  id          Int          @id @default(autoincrement())
  question    String
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creator     User         @relation(fields: [creatorId], references: [id])
  creatorId   Int
  options     PollOption[]
  votes       Vote[]       // useful for queries by poll
}

model PollOption {
  id       Int      @id @default(autoincrement())
  text     String
  poll     Poll     @relation(fields: [pollId], references: [id])
  pollId   Int
  votes    Vote[]
}

model Vote {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  option    PollOption  @relation(fields: [optionId], references: [id])
  optionId  Int
  poll      Poll        @relation(fields: [pollId], references: [id])
  pollId    Int
  createdAt DateTime    @default(now())

  @@unique([userId, pollId]) // Enforce one vote per user per poll
  @@index([pollId])
  @@index([optionId])
}
